import psi4
import numpy as np
import random

mol = psi4.geometry("""
O
H 1 1.00
H 1 1.00 2 103.1
""")

psi4.set_num_threads(6)
memory = 50000
primary = psi4.core.BasisSet.build(mol, "ORBITAL", "cc-pVDZ")
aux = psi4.core.BasisSet.build(mol, "ORBITAL", "cc-pVDZ-jkfit")

nbf = primary.nbf()
naux = aux.nbf()

# construct spaces
names = ['C1', 'C2', 'C3', 'C4', 'C5']
sizes = [16, 16, 20, 20, 24]
spaces = {names[ind]: psi4.core.Matrix.from_array(np.random.rand(nbf, size)) for ind, size in enumerate(sizes)}
space_pairs = [[0, 0], [0, 1], [1, 1], [2, 2], [3, 2], [3, 3], [4, 4]]

# space vectors
C_vectors  = [[spaces[names[left]], spaces[names[right]]] for left, right in space_pairs]

# now construct DFJK and symm_JK objects

# DFJK
psi4.set_options({"SCF_TYPE" : "DF",
                  "DF_SCF_TYPE" : "DFJK"})
DFJK = JK.build_JK(primary, aux)
DFJK.initialize()
DFJK.print_header()

# symm_JK
psi4.set_options({"SCF_TYPE" : "DF",
                  "DF_SCF_TYPE" : "SYMM_JK"})
SYMM_JK = JK.build_JK(primary, aux)
SYMM_JK.initialize()
SYMM_JK.print_header()

# add C matrices
for Cleft, Cright in C_vectors:
    DFJK.C_left_add(Cleft)
    SYMM_JK.C_left_add(Cleft)
    DFJK.C_right_add(Cright)
    SYMM_JK.C_right_add(Cright)

# compute
DFJK.compute()
SYMM_JK.compute()

# get integrals
DFJK_ints = [DFJK.J(), DFJK.K()]
SYMM_JK_ints = [SYMM_JK.J(), SYMM_JK.K()]

# compare
for j, t in enumerate(['J', 'K']):
    for i in range(len(DFJK_ints[0])):
        print(t+str(i), ': %e' % 
            (np.linalg.norm(np.asarray(DFJK_ints[j][i]) -
                            np.asarray(SYMM_JK_ints[j][i]))))

